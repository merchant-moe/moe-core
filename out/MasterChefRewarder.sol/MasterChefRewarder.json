{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__AlreadyStopped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "remainingReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedReward",
          "type": "uint256"
        }
      ],
      "name": "BaseRewarder__InsufficientReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "BaseRewarder__InvalidPid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "BaseRewarder__InvalidStartTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__NotNativeRewarder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__Stopped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseRewarder__ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MasterChefRewarder__AlreadyLinked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MasterChefRewarder__NotLinked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MasterChefRewarder__UseUnlink",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardParameterUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "getPendingReward",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewarderParameter",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "link",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oldTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "onModify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewarderParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "unlink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x60a06040523480156200001157600080fd5b50604051620017ba380380620017ba83398101604081905262000034916200015d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805482919068010000000000000000810460ff1615906001600160401b0316600081158015620000825750825b90506000826001600160401b031660011480156200009f5750303b155b905081158015620000ae575080155b15620000cd5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315620000fc57845460ff60401b1916680100000000000000001785555b6001600160a01b03861660805283156200015057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050506200018f565b6000602082840312156200017057600080fd5b81516001600160a01b03811681146200018857600080fd5b9392505050565b6080516115f3620001c7600039600081816102740152818161059b015281816108b101528181610a820152610fb701526115f36000f3fe6080604052600436106101185760003560e01c8063ab470f05116100a0578063c718325111610064578063c718325114610318578063c877296314610357578063e30c39781461036c578063f1e023fd14610381578063f2fde38b146103a157610127565b8063ab470f0514610265578063b1a867d514610298578063b5f578fc146102b8578063b8dc491b146102d8578063c4d66de8146102f857610127565b8063715018a6116100e7578063715018a6146101d857806379ba5097146101ed578063870b50fd1461020257806389f5ab0d146102305780638da5cb5b1461025057610127565b806307da68f51461012f57806321df0da71461014457806339cbec9d146101765780633f683b6a146101b557610127565b36610127576101256103c1565b005b6101256103c1565b34801561013b57600080fd5b506101256103f4565b34801561015057600080fd5b5061015961040d565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018257600080fd5b5061018b61041c565b604080516001600160a01b039095168552602085019390935291830152606082015260800161016d565b3480156101c157600080fd5b5060045460ff16604051901515815260200161016d565b3480156101e457600080fd5b50610125610441565b3480156101f957600080fd5b50610125610453565b34801561020e57600080fd5b5061022261021d366004611392565b6104a0565b60405190815260200161016d565b34801561023c57600080fd5b5061012561024b3660046113d6565b6104fb565b34801561025c57600080fd5b5061015961055b565b34801561027157600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610159565b3480156102a457600080fd5b506101256102b3366004611402565b610590565b3480156102c457600080fd5b506101256102d336600461141b565b61066e565b3480156102e457600080fd5b506101256102f336600461143d565b61069d565b34801561030457600080fd5b50610125610313366004611476565b61071f565b34801561032457600080fd5b50610338610333366004611493565b61082f565b604080516001600160a01b03909316835260208301919091520161016d565b34801561036357600080fd5b50610222610873565b34801561037857600080fd5b5061015961087d565b34801561038d57600080fd5b5061012561039c366004611402565b6108a6565b3480156103ad57600080fd5b506101256103bc366004611476565b61096f565b60006103cb6109f4565b6001600160a01b0316146103f257604051639415816f60e01b815260040160405180910390fd5b565b60405163f92ad2c760e01b815260040160405180910390fd5b60006104176109f4565b905090565b60008060008061042a6109f4565b600054600554600354929791965094509092509050565b610449610a07565b6103f26000610a39565b338061045d61087d565b6001600160a01b0316146104945760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61049d81610a39565b50565b6000600160085460ff1660028111156104bb576104bb6114c8565b146104d95760405163d0ef47e760e01b815260040160405180910390fd5b6104e68686868686610a75565b90506104f28682610b24565b95945050505050565b610503610a07565b60045460ff161561052757604051630f3e8c1360e11b815260040160405180910390fd5b4282101561054b57604051635c62004b60e11b81526004810183905260240161048b565b610556838383610b8d565b505050565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105d95760405163332bf49d60e21b815260040160405180910390fd5b600060085460ff1660028111156105f2576105f26114c8565b1461061057604051630d85b6ed60e01b815260040160405180910390fd5b610618610cf4565b811461063a5760405163e7ca808760e01b81526004810182905260240161048b565b60045460ff161561065e57604051630f3e8c1360e11b815260040160405180910390fd5b506008805460ff19166001179055565b610676610a07565b6005546000428211610688574261068a565b815b9050610697848285610b8d565b50505050565b6106a5610a07565b60006106b083610d07565b60045490915060ff161580156106de57506106c96109f4565b6001600160a01b0316836001600160a01b0316145b156106f3576002546106f090826114f4565b90505b80600003610714576040516360e6da0360e01b815260040160405180910390fd5b610556838383610d8d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156107655750825b905060008267ffffffffffffffff1660011480156107825750303b155b905081158015610790575080155b156107ae5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156107d857845460ff60401b1916600160401b1785555b6107e186610e30565b831561082757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600080600061084e6000546003546005610e419092919063ffffffff16565b90506108586109f4565b610866600588888886610e78565b9250925050935093915050565b6000610417610cf4565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610580565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108ef5760405163332bf49d60e21b815260040160405180910390fd5b6108f7610cf4565b81146109195760405163e7ca808760e01b81526004810182905260240161048b565b600160085460ff166002811115610932576109326114c8565b146109505760405163d0ef47e760e01b815260040160405180910390fd5b506008805460ff19908116600217909155600480549091166001179055565b610977610a07565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b03831690811782556109bb61055b565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b3660011981013560f01c90033560601c90565b33610a1061055b565b6001600160a01b0316146103f25760405163118cdaa760e01b815233600482015260240161048b565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610a7182610ede565b5050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ac05760405163332bf49d60e21b815260040160405180910390fd5b610ac8610cf4565b8514610aea5760405163e7ca808760e01b81526004810186905260240161048b565b60045460ff1615610b0e57604051630f3e8c1360e11b815260040160405180910390fd5b610b1a86858585610f4f565b9695505050505050565b6000610b2e6109f4565b9050610b3b818484610d8d565b806001600160a01b0316836001600160a01b03167f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd98706884604051610b8091815260200190565b60405180910390a3505050565b60045460ff1615610bb157604051630f3e8c1360e11b815260040160405180910390fd5b80158015610bbe57508215155b15610bdc57604051631a4778f160e31b815260040160405180910390fd5b60015460008054600354610bf291600591610e41565b9050610bfe8183611507565b9150600082610c13610c0e6109f4565b610d07565b610c1d91906114f4565b90506000610c2b858861151a565b905080821015610c585760405163f79406ed60e01b8152600481018390526024810182905260440161048b565b6000610c648688611507565b90506000610c70610fb3565b60008a90559050610c818387611507565b60025560038290556001869055610c9a6005828761104b565b50428814610ca85760058890555b604080518a8152602081018a90529081018390527ff0b276e9ee40b3a3d065f636ee656c9bf1c9a0c4060fb212fd0861890c107be59060600160405180910390a1505050505050505050565b3660011981013560f01c90036014013590565b60006001600160a01b03821615610d85576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190611531565b610d87565b475b92915050565b80600003610d9a57505050565b6001600160a01b038316610e1c576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610df5576040519150601f19603f3d011682016040523d82523d6000602084013e610dfa565b606091505b505090508061069757604051630df61d5560e01b815260040160405180910390fd5b6105566001600160a01b038416838361109b565b610e386110ed565b61049d81611136565b825460009081428410610e545742610e56565b835b9050808211610e69578482820302610e6c565b60005b925050505b9392505050565b600080610e858484611168565b8760010154610e949190611507565b90508415610ed0576001600160a01b0386166000908152600288016020526040902054610ec1828761118c565b610ecb91906114f4565b610ed3565b60005b979650505050505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60015460025460008054600354919392918491610f6f9160059190610e41565b9050610f80600589898989866111a3565b935083610f8d8285611507565b610f9791906114f4565b600155610fa484836114f4565b60025550919695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d23ab97a610fec610cf4565b6040518263ffffffff1660e01b815260040161100a91815260200190565b602060405180830381865afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190611531565b6000806110588484611168565b8554909150421115611068574285555b801561108d57808560010160008282546110829190611507565b9250508190556104f2565b846001015495945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610556908490611227565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166103f257604051631afcd79f60e31b815260040160405180910390fd5b61113e6110ed565b6001600160a01b03811661049457604051631e4fbdf760e01b81526000600482015260240161048b565b600082156111835761117e83604084901b61154a565b610e71565b60009392505050565b6000604061119a848461151a565b901c9392505050565b6000806111b188858561104b565b905085156111ed576001600160a01b03871660009081526002890160205260409020546111de828861118c565b6111e891906114f4565b6111f0565b60005b91506111fc818661118c565b6001600160a01b03909716600090815260029098016020525060409096209490945550929392505050565b600061123c6001600160a01b0384168361128a565b9050805160001415801561126157508080602001905181019061125f919061156c565b155b1561055657604051635274afe760e01b81526001600160a01b038416600482015260240161048b565b6060610e718383600084600080856001600160a01b031684866040516112b0919061158e565b60006040518083038185875af1925050503d80600081146112ed576040519150601f19603f3d011682016040523d82523d6000602084013e6112f2565b606091505b5091509150610e6c86838360608261130d5761117e82611354565b815115801561132457506001600160a01b0384163b155b1561134d57604051639996b31560e01b81526001600160a01b038516600482015260240161048b565b5080610e71565b8051156113645780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461049d57600080fd5b600080600080600060a086880312156113aa57600080fd5b85356113b58161137d565b97602087013597506040870135966060810135965060800135945092505050565b6000806000606084860312156113eb57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561141457600080fd5b5035919050565b6000806040838503121561142e57600080fd5b50508035926020909101359150565b6000806040838503121561145057600080fd5b823561145b8161137d565b9150602083013561146b8161137d565b809150509250929050565b60006020828403121561148857600080fd5b8135610e718161137d565b6000806000606084860312156114a857600080fd5b83356114b38161137d565b95602085013595506040909401359392505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d8757610d876114de565b80820180821115610d8757610d876114de565b8082028115828204841417610d8757610d876114de565b60006020828403121561154357600080fd5b5051919050565b60008261156757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561157e57600080fd5b81518015158114610e7157600080fd5b6000825160005b818110156115af5760208186018101518583015201611595565b50600092019182525091905056fea26469706673582212209d70b30d8b217d9f71aa2e6bb8ad42c2b3c6b43dcd7b51b9e96ad4ee60ef69a864736f6c63430008140033",
    "sourceMap": "457:3340:97:-:0;;;718:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8870:21:23;4302:15;;759:6:97;;8870:21:23;4302:15;;;;;4301:16;;-1:-1:-1;;;;;4348:14:23;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;-1:-1:-1;;;;;4790:16:23;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:23;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:23;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;;;;;4951:18:23;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:23;;;;;4979:67;-1:-1:-1;;;;;1270:16:95;::::1;;::::0;5066:101:23;;;;5100:23;;-1:-1:-1;;;;5100:23:23;;;5142:14;;-1:-1:-1;462:50:120;;5142:14:23;;450:2:120;435:18;5142:14:23;;;;;;;5066:101;4092:1081;;;;;1220:73:95;718:51:97;457:3340;;14:290:120;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:120;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:120:o;309:209::-;457:3340:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101185760003560e01c8063ab470f05116100a0578063c718325111610064578063c718325114610318578063c877296314610357578063e30c39781461036c578063f1e023fd14610381578063f2fde38b146103a157610127565b8063ab470f0514610265578063b1a867d514610298578063b5f578fc146102b8578063b8dc491b146102d8578063c4d66de8146102f857610127565b8063715018a6116100e7578063715018a6146101d857806379ba5097146101ed578063870b50fd1461020257806389f5ab0d146102305780638da5cb5b1461025057610127565b806307da68f51461012f57806321df0da71461014457806339cbec9d146101765780633f683b6a146101b557610127565b36610127576101256103c1565b005b6101256103c1565b34801561013b57600080fd5b506101256103f4565b34801561015057600080fd5b5061015961040d565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018257600080fd5b5061018b61041c565b604080516001600160a01b039095168552602085019390935291830152606082015260800161016d565b3480156101c157600080fd5b5060045460ff16604051901515815260200161016d565b3480156101e457600080fd5b50610125610441565b3480156101f957600080fd5b50610125610453565b34801561020e57600080fd5b5061022261021d366004611392565b6104a0565b60405190815260200161016d565b34801561023c57600080fd5b5061012561024b3660046113d6565b6104fb565b34801561025c57600080fd5b5061015961055b565b34801561027157600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610159565b3480156102a457600080fd5b506101256102b3366004611402565b610590565b3480156102c457600080fd5b506101256102d336600461141b565b61066e565b3480156102e457600080fd5b506101256102f336600461143d565b61069d565b34801561030457600080fd5b50610125610313366004611476565b61071f565b34801561032457600080fd5b50610338610333366004611493565b61082f565b604080516001600160a01b03909316835260208301919091520161016d565b34801561036357600080fd5b50610222610873565b34801561037857600080fd5b5061015961087d565b34801561038d57600080fd5b5061012561039c366004611402565b6108a6565b3480156103ad57600080fd5b506101256103bc366004611476565b61096f565b60006103cb6109f4565b6001600160a01b0316146103f257604051639415816f60e01b815260040160405180910390fd5b565b60405163f92ad2c760e01b815260040160405180910390fd5b60006104176109f4565b905090565b60008060008061042a6109f4565b600054600554600354929791965094509092509050565b610449610a07565b6103f26000610a39565b338061045d61087d565b6001600160a01b0316146104945760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b61049d81610a39565b50565b6000600160085460ff1660028111156104bb576104bb6114c8565b146104d95760405163d0ef47e760e01b815260040160405180910390fd5b6104e68686868686610a75565b90506104f28682610b24565b95945050505050565b610503610a07565b60045460ff161561052757604051630f3e8c1360e11b815260040160405180910390fd5b4282101561054b57604051635c62004b60e11b81526004810183905260240161048b565b610556838383610b8d565b505050565b6000807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105d95760405163332bf49d60e21b815260040160405180910390fd5b600060085460ff1660028111156105f2576105f26114c8565b1461061057604051630d85b6ed60e01b815260040160405180910390fd5b610618610cf4565b811461063a5760405163e7ca808760e01b81526004810182905260240161048b565b60045460ff161561065e57604051630f3e8c1360e11b815260040160405180910390fd5b506008805460ff19166001179055565b610676610a07565b6005546000428211610688574261068a565b815b9050610697848285610b8d565b50505050565b6106a5610a07565b60006106b083610d07565b60045490915060ff161580156106de57506106c96109f4565b6001600160a01b0316836001600160a01b0316145b156106f3576002546106f090826114f4565b90505b80600003610714576040516360e6da0360e01b815260040160405180910390fd5b610556838383610d8d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156107655750825b905060008267ffffffffffffffff1660011480156107825750303b155b905081158015610790575080155b156107ae5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156107d857845460ff60401b1916600160401b1785555b6107e186610e30565b831561082757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b600080600061084e6000546003546005610e419092919063ffffffff16565b90506108586109f4565b610866600588888886610e78565b9250925050935093915050565b6000610417610cf4565b6000807f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00610580565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108ef5760405163332bf49d60e21b815260040160405180910390fd5b6108f7610cf4565b81146109195760405163e7ca808760e01b81526004810182905260240161048b565b600160085460ff166002811115610932576109326114c8565b146109505760405163d0ef47e760e01b815260040160405180910390fd5b506008805460ff19908116600217909155600480549091166001179055565b610977610a07565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319166001600160a01b03831690811782556109bb61055b565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b3660011981013560f01c90033560601c90565b33610a1061055b565b6001600160a01b0316146103f25760405163118cdaa760e01b815233600482015260240161048b565b7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c0080546001600160a01b0319168155610a7182610ede565b5050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ac05760405163332bf49d60e21b815260040160405180910390fd5b610ac8610cf4565b8514610aea5760405163e7ca808760e01b81526004810186905260240161048b565b60045460ff1615610b0e57604051630f3e8c1360e11b815260040160405180910390fd5b610b1a86858585610f4f565b9695505050505050565b6000610b2e6109f4565b9050610b3b818484610d8d565b806001600160a01b0316836001600160a01b03167f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd98706884604051610b8091815260200190565b60405180910390a3505050565b60045460ff1615610bb157604051630f3e8c1360e11b815260040160405180910390fd5b80158015610bbe57508215155b15610bdc57604051631a4778f160e31b815260040160405180910390fd5b60015460008054600354610bf291600591610e41565b9050610bfe8183611507565b9150600082610c13610c0e6109f4565b610d07565b610c1d91906114f4565b90506000610c2b858861151a565b905080821015610c585760405163f79406ed60e01b8152600481018390526024810182905260440161048b565b6000610c648688611507565b90506000610c70610fb3565b60008a90559050610c818387611507565b60025560038290556001869055610c9a6005828761104b565b50428814610ca85760058890555b604080518a8152602081018a90529081018390527ff0b276e9ee40b3a3d065f636ee656c9bf1c9a0c4060fb212fd0861890c107be59060600160405180910390a1505050505050505050565b3660011981013560f01c90036014013590565b60006001600160a01b03821615610d85576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190611531565b610d87565b475b92915050565b80600003610d9a57505050565b6001600160a01b038316610e1c576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610df5576040519150601f19603f3d011682016040523d82523d6000602084013e610dfa565b606091505b505090508061069757604051630df61d5560e01b815260040160405180910390fd5b6105566001600160a01b038416838361109b565b610e386110ed565b61049d81611136565b825460009081428410610e545742610e56565b835b9050808211610e69578482820302610e6c565b60005b925050505b9392505050565b600080610e858484611168565b8760010154610e949190611507565b90508415610ed0576001600160a01b0386166000908152600288016020526040902054610ec1828761118c565b610ecb91906114f4565b610ed3565b60005b979650505050505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60015460025460008054600354919392918491610f6f9160059190610e41565b9050610f80600589898989866111a3565b935083610f8d8285611507565b610f9791906114f4565b600155610fa484836114f4565b60025550919695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d23ab97a610fec610cf4565b6040518263ffffffff1660e01b815260040161100a91815260200190565b602060405180830381865afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190611531565b6000806110588484611168565b8554909150421115611068574285555b801561108d57808560010160008282546110829190611507565b9250508190556104f2565b846001015495945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610556908490611227565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166103f257604051631afcd79f60e31b815260040160405180910390fd5b61113e6110ed565b6001600160a01b03811661049457604051631e4fbdf760e01b81526000600482015260240161048b565b600082156111835761117e83604084901b61154a565b610e71565b60009392505050565b6000604061119a848461151a565b901c9392505050565b6000806111b188858561104b565b905085156111ed576001600160a01b03871660009081526002890160205260409020546111de828861118c565b6111e891906114f4565b6111f0565b60005b91506111fc818661118c565b6001600160a01b03909716600090815260029098016020525060409096209490945550929392505050565b600061123c6001600160a01b0384168361128a565b9050805160001415801561126157508080602001905181019061125f919061156c565b155b1561055657604051635274afe760e01b81526001600160a01b038416600482015260240161048b565b6060610e718383600084600080856001600160a01b031684866040516112b0919061158e565b60006040518083038185875af1925050503d80600081146112ed576040519150601f19603f3d011682016040523d82523d6000602084013e6112f2565b606091505b5091509150610e6c86838360608261130d5761117e82611354565b815115801561132457506001600160a01b0384163b155b1561134d57604051639996b31560e01b81526001600160a01b038516600482015260240161048b565b5080610e71565b8051156113645780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461049d57600080fd5b600080600080600060a086880312156113aa57600080fd5b85356113b58161137d565b97602087013597506040870135966060810135965060800135945092505050565b6000806000606084860312156113eb57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561141457600080fd5b5035919050565b6000806040838503121561142e57600080fd5b50508035926020909101359150565b6000806040838503121561145057600080fd5b823561145b8161137d565b9150602083013561146b8161137d565b809150509250929050565b60006020828403121561148857600080fd5b8135610e718161137d565b6000806000606084860312156114a857600080fd5b83356114b38161137d565b95602085013595506040909401359392505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d8757610d876114de565b80820180821115610d8757610d876114de565b8082028115828204841417610d8757610d876114de565b60006020828403121561154357600080fd5b5051919050565b60008261156757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561157e57600080fd5b81518015158114610e7157600080fd5b6000825160005b818110156115af5760208186018101518583015201611595565b50600092019182525091905056fea26469706673582212209d70b30d8b217d9f71aa2e6bb8ad42c2b3c6b43dcd7b51b9e96ad4ee60ef69a864736f6c63430008140033",
    "sourceMap": "457:3340:97:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1700:17:95;:15;:17::i;:::-;457:3340:97;;1874:17:95;:15;:17::i;1976:121:97:-;;;;;;;;;;;;;:::i;2065:98:95:-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;194:32:120;;;176:51;;164:2;149:18;2065:98:95;;;;;;;;2912:303;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;503:32:120;;;485:51;;567:2;552:18;;545:34;;;;595:18;;;588:34;653:2;638:18;;631:34;472:3;457:19;2912:303:95;238:433:120;4090:99:95;;;;;;;;;;-1:-1:-1;4172:10:95;;;;4090:99;;841:14:120;;834:22;816:41;;804:2;789:18;4090:99:95;676:187:120;3155:101:22;;;;;;;;;;;;;:::i;2774:229:21:-;;;;;;;;;;;;;:::i;2626:424:97:-;;;;;;;;;;-1:-1:-1;2626:424:97;;;;;:::i;:::-;;:::i;:::-;;;1676:25:120;;;1664:2;1649:18;2626:424:97;1530:177:120;4316:410:95;;;;;;;;;;-1:-1:-1;4316:410:95;;;;;:::i;:::-;;:::i;2441:144:22:-;;;;;;;;;;;;;:::i;2318:99:95:-;;;;;;;;;;-1:-1:-1;2403:7:95;2318:99;;965:362:97;;;;;;;;;;-1:-1:-1;965:362:97;;;;;:::i;:::-;;:::i;5027:383:95:-;;;;;;;;;;-1:-1:-1;5027:383:95;;;;;:::i;:::-;;:::i;5978:316::-;;;;;;;;;;-1:-1:-1;5978:316:95;;;;;:::i;:::-;;:::i;1428:123::-;;;;;;;;;;-1:-1:-1;1428:123:95;;;;;:::i;:::-;;:::i;3536:380::-;;;;;;;;;;-1:-1:-1;3536:380:95;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3936:32:120;;;3918:51;;4000:2;3985:18;;3978:34;;;;3891:18;3536:380:95;3728:290:120;2520:95:95;;;;;;;;;;;;;:::i;1680:168:21:-;;;;;;;;;;;;;:::i;1527:330:97:-;;;;;;;;;;-1:-1:-1;1527:330:97;;;;;:::i;:::-;;:::i;2041:247:21:-;;;;;;;;;;-1:-1:-1;2041:247:21;;;;;:::i;:::-;;:::i;11427:143:95:-;11519:1;11498:8;:6;:8::i;:::-;-1:-1:-1;;;;;11490:31:95;;11486:77;;11530:33;;-1:-1:-1;;;11530:33:95;;;;;;;;;;;11486:77;11427:143::o;1976:121:97:-;2059:31;;-1:-1:-1;;;2059:31:97;;;;;;;;;;;2065:98:95;2123:6;2148:8;:6;:8::i;:::-;2141:15;;2065:98;:::o;2912:303::-;3022:12;3036:23;3061:27;3090:20;3134:8;:6;:8::i;:::-;3144:17;;3163:9;:29;3194:13;;3126:82;;3144:17;;-1:-1:-1;3163:29:95;-1:-1:-1;3194:13:95;;-1:-1:-1;2912:303:95;-1:-1:-1;2912:303:95:o;3155:101:22:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;2774:229:21:-:0;966:10:24;;2869:14:21;:12;:14::i;:::-;-1:-1:-1;;;;;2869:24:21;;2865:96;;2916:34;;-1:-1:-1;;;2916:34:21;;-1:-1:-1;;;;;194:32:120;;2916:34:21;;;176:51:120;149:18;;2916:34:21;;;;;;;;2865:96;2970:26;2989:6;2970:18;:26::i;:::-;2816:187;2774:229::o;2626:424:97:-;2816:14;2861:13;2850:7;;;;:24;;;;;;;;:::i;:::-;;2846:68;;2883:31;;-1:-1:-1;;;2883:31:97;;;;;;;;;;;2846:68;2934:75;2956:7;2965:3;2970:10;2982;2994:14;2934:21;:75::i;:::-;2925:84;;3020:23;3027:7;3036:6;3020;:23::i;:::-;2626:424;;;;;;;:::o;4316:410:95:-;2334:13:22;:11;:13::i;:::-;4489:10:95::1;::::0;::::1;;4485:46;;;4508:23;;-1:-1:-1::0;;;4508:23:95::1;;;;;;;;;;;4485:46;4562:15;4545:14;:32;4541:96;;;4586:51;::::0;-1:-1:-1;;;4586:51:95;;::::1;::::0;::::1;1676:25:120::0;;;1649:18;;4586:51:95::1;1530:177:120::0;4541:96:95::1;4648:71;4669:15;4686:14;4702:16;4648:20;:71::i;:::-;4316:410:::0;;;:::o;2441:144:22:-;2487:7;;1313:22;2533:20;2570:8;-1:-1:-1;;;;;2570:8:22;;2441:144;-1:-1:-1;;2441:144:22:o;965:362:97:-;1022:10;-1:-1:-1;;;;;1036:7:97;1022:21;;1018:63;;1052:29;;-1:-1:-1;;;1052:29:97;;;;;;;;;;;1018:63;1106:15;1095:7;;;;:26;;;;;;;;:::i;:::-;;1091:74;;1130:35;;-1:-1:-1;;;1130:35:97;;;;;;;;;;;1091:74;1186:6;:4;:6::i;:::-;1179:3;:13;1175:55;;1201:29;;-1:-1:-1;;;1201:29:97;;;;;1676:25:120;;;1649:18;;1201:29:97;1530:177:120;1175:55:97;1244:10;;;;1240:46;;;1263:23;;-1:-1:-1;;;1263:23:97;;;;;;;;;;;1240:46;-1:-1:-1;1297:7:97;:23;;-1:-1:-1;;1297:23:97;1307:13;1297:23;;;965:362::o;5027:383:95:-;2334:13:22;:11;:13::i;:::-;5180:9:95::1;:29:::0;5150:27:::1;5266:15;5244:37:::0;::::1;:77;;5306:15;5244:77;;;5284:19;5244:77;5219:102;;5332:71;5353:15;5370:14;5386:16;5332:20;:71::i;:::-;5140:270;;5027:383:::0;;:::o;5978:316::-;2334:13:22;:11;:13::i;:::-;6068:15:95::1;6086:21;6101:5;6086:14;:21::i;:::-;6123:10;::::0;6068:39;;-1:-1:-1;6123:10:95::1;;6122:11;:32:::0;::::1;;;;6146:8;:6;:8::i;:::-;-1:-1:-1::0;;;;;6137:17:95::1;:5;-1:-1:-1::0;;;;;6137:17:95::1;;6122:32;6118:57;;;6167:8;::::0;6156:19:::1;::::0;;::::1;:::i;:::-;;;6118:57;6189:7;6200:1;6189:12:::0;6185:51:::1;;6210:26;;-1:-1:-1::0;;;6210:26:95::1;;;;;;;;;;;6185:51;6247:40;6263:5;6270:7;6279;6247:15;:40::i;1428:123::-:0;8870:21:23;4302:15;;-1:-1:-1;;;4302:15:23;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:23;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:23;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:23;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:23;-1:-1:-1;;;5013:22:23;;;4979:67;1516:28:95::1;1531:12;1516:14;:28::i;:::-;5070:14:23::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:23;;;5142:14;;-1:-1:-1;4573:50:120;;5142:14:23;;4561:2:120;4546:18;5142:14:23;;;;;;;5066:101;4092:1081;;;;;1428:123:95;:::o;3536:380::-;3695:6;3703:7;3726:20;3749:59;3775:17;;3794:13;;3749:9;:25;;:59;;;;;:::i;:::-;3726:82;;3827:8;:6;:8::i;:::-;3837:71;:9;3864:7;3873;3882:11;3895:12;3837:26;:71::i;:::-;3819:90;;;;;3536:380;;;;;;:::o;2520:95::-;2576:7;2602:6;:4;:6::i;1680:168:21:-;1733:7;;1318:27;1784:25;1187:174;1527:330:97;1586:10;-1:-1:-1;;;;;1600:7:97;1586:21;;1582:63;;1616:29;;-1:-1:-1;;;1616:29:97;;;;;;;;;;;1582:63;1666:6;:4;:6::i;:::-;1659:3;:13;1655:55;;1681:29;;-1:-1:-1;;;1681:29:97;;;;;1676:25:120;;;1649:18;;1681:29:97;1530:177:120;1655:55:97;1735:13;1724:7;;;;:24;;;;;;;;:::i;:::-;;1720:68;;1757:31;;-1:-1:-1;;;1757:31:97;;;;;;;;;;;1720:68;-1:-1:-1;1799:7:97;:24;;-1:-1:-1;;1799:24:97;;;1809:14;1799:24;;;;1833:10;:17;;;;;1799:24;1833:17;;;1527:330::o;2041:247:21:-;2334:13:22;:11;:13::i;:::-;1318:27:21;2197:26;;-1:-1:-1;;;;;;2197:26:21::1;-1:-1:-1::0;;;;;2197:26:21;::::1;::::0;;::::1;::::0;;2263:7:::1;:5;:7::i;:::-;-1:-1:-1::0;;;;;2238:43:21::1;;;;;;;;;;;2120:168;2041:247:::0;:::o;3217:107:97:-;4818:14:0;-1:-1:-1;;4814:22:0;;4801:36;4795:4;4791:47;4771:68;;1712:36;1706:4;1702:47;;2065:98:95:o;2658:162:22:-;966:10:24;2717:7:22;:5;:7::i;:::-;-1:-1:-1;;;;;2717:23:22;;2713:101;;2763:40;;-1:-1:-1;;;2763:40:22;;966:10:24;2763:40:22;;;176:51:120;149:18;;2763:40:22;14:219:120;2472:222:21;1318:27;2621:22;;-1:-1:-1;;;;;;2621:22:21;;;2653:34;2678:8;2653:24;:34::i;:::-;2544:150;2472:222;:::o;6694:465:95:-;6871:7;6898:10;-1:-1:-1;;;;;6912:7:95;6898:21;;6894:63;;6928:29;;-1:-1:-1;;;6928:29:95;;;;;;;;;;;6894:63;6978:6;:4;:6::i;:::-;6971:3;:13;6967:55;;6993:29;;-1:-1:-1;;;6993:29:95;;;;;1676:25:120;;;1649:18;;6993:29:95;1530:177:120;6967:55:95;7036:10;;;;7032:46;;;7055:23;;-1:-1:-1;;;7055:23:95;;;;;;;;;;;7032:46;7096:56;7104:7;7113:10;7125;7137:14;7096:7;:56::i;:::-;7089:63;6694:465;-1:-1:-1;;;;;;6694:465:95:o;8707:201::-;8783:12;8798:8;:6;:8::i;:::-;8783:23;;8817:39;8833:5;8840:7;8849:6;8817:15;:39::i;:::-;8887:5;-1:-1:-1;;;;;8872:29:95;8878:7;-1:-1:-1;;;;;8872:29:95;;8894:6;8872:29;;;;1676:25:120;;1664:2;1649:18;;1530:177;8872:29:95;;;;;;;;8773:135;8707:201;;:::o;9964:1350::-;10120:10;;;;10116:46;;;10139:23;;-1:-1:-1;;;10139:23:95;;;;;;;;;;;10116:46;10176:21;;:45;;;;-1:-1:-1;10201:20:95;;;10176:45;10172:89;;;10230:31;;-1:-1:-1;;;10230:31:95;;;;;;;;;;;10172:89;10304:22;;10272:29;10385:17;;10404:13;;10359:59;;:9;;:25;:59::i;:::-;10336:82;-1:-1:-1;10429:37:95;10336:82;10429:37;;:::i;:::-;;;10477:23;10530:21;10503:24;10518:8;:6;:8::i;:::-;10503:14;:24::i;:::-;:48;;;;:::i;:::-;10477:74;-1:-1:-1;10561:22:95;10586:34;10604:16;10586:15;:34;:::i;:::-;10561:59;;10653:14;10635:15;:32;10631:110;;;10676:65;;-1:-1:-1;;;10676:65:95;;;;;5111:25:120;;;5152:18;;;5145:34;;;5084:18;;10676:65:95;4937:248:120;10631:110:95;10752:20;10775:33;10792:16;10775:14;:33;:::i;:::-;10752:56;;10818:19;10840:17;:15;:17::i;:::-;10868;:35;;;10818:39;-1:-1:-1;10924:38:95;10948:14;10924:21;:38;:::i;:::-;10913:8;:49;10973:13;:28;;;11011:22;:46;;;11068:58;:9;11100:11;11113:12;11068:31;:58::i;:::-;;11159:15;11141:14;:33;11137:85;;11176:9;:46;;;11137:85;11238:69;;;5392:25:120;;;5448:2;5433:18;;5426:34;;;5476:18;;;5469:34;;;11238:69:95;;5380:2:120;5365:18;11238:69:95;;;;;;;10106:1208;;;;;;9964:1350;;;:::o;3427:99:97:-;4818:14:0;-1:-1:-1;;4814:22:0;;4801:36;4795:4;4791:47;4771:68;;3516:2:97;2180:22:0;2167:36;;2065:98:95:o;7375:187::-;7444:7;-1:-1:-1;;;;;7470:28:95;;;:85;;7525:30;;-1:-1:-1;;;7525:30:95;;7549:4;7525:30;;;176:51:120;-1:-1:-1;;;;;7525:15:95;;;;;149:18:120;;7525:30:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7470:85;;;7501:21;7470:85;7463:92;7375:187;-1:-1:-1;;7375:187:95:o;9175:372::-;9278:6;9288:1;9278:11;9274:24;;9175:372;;;:::o;9274:24::-;-1:-1:-1;;;;;9312:28:95;;9308:233;;9357:6;9368:7;-1:-1:-1;;;;;9368:12:95;9388:6;9368:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9356:43;;;9418:1;9413:51;;9428:36;;-1:-1:-1;;;9428:36:95;;;;;;;;;;;9308:233;9495:35;-1:-1:-1;;;;;9495:18:95;;9514:7;9523:6;9495:18;:35::i;1847:127:22:-;6931:20:23;:18;:20::i;:::-;1929:38:22::1;1954:12;1929:24;:38::i;1857:469:94:-:0;2057:28;;2004:7;;;2115:15;:30;-1:-1:-1;2115:63:94;;2163:15;2115:63;;;2148:12;2115:63;2095:83;;2242:9;2220:19;:31;:89;;2294:15;2271:19;2259:9;:31;2258:51;2220:89;;;2254:1;2220:89;2213:96;;;;1857:469;;;;;;:::o;3846:416::-;4046:7;4065:23;4118:42;4134:11;4147:12;4118:15;:42::i;:::-;4091:8;:24;;;:69;;;;:::i;:::-;4065:95;-1:-1:-1;4178:12:94;;:77;;-1:-1:-1;;;;;4233:22:94;;;;;;:13;;;:22;;;;;;4197:33;4205:15;4222:7;4197;:33::i;:::-;:58;;;;:::i;:::-;4178:77;;;4193:1;4178:77;4171:84;3846:416;-1:-1:-1;;;;;;;3846:416:94:o;3774:248:22:-;1313:22;3923:8;;-1:-1:-1;;;;;;3941:19:22;;-1:-1:-1;;;;;3941:19:22;;;;;;;;3975:40;;3923:8;;;;;3975:40;;3847:24;;3975:40;3837:185;;3774:248;:::o;7937:588:95:-;8148:22;;8198:8;;8085:15;8266:17;;8285:13;;8085:15;;8148:22;8198:8;8085:15;;8240:59;;:9;;8266:17;8240:25;:59::i;:::-;8217:82;-1:-1:-1;8319:79:95;:9;8336:7;8345:10;8357;8369:14;8217:82;8319:16;:79::i;:::-;8309:89;-1:-1:-1;8309:89:95;8434:36;8458:12;8434:21;:36;:::i;:::-;:46;;;;:::i;:::-;8409:22;:71;8501:17;8511:7;8501;:17;:::i;:::-;8490:8;:28;-1:-1:-1;7937:588:95;;;-1:-1:-1;;;;;;7937:588:95:o;3659:136:97:-;3718:7;3756;-1:-1:-1;;;;;3744:36:97;;3781:6;:4;:6::i;:::-;3744:44;;;;;;;;;;;;;1676:25:120;;1664:2;1649:18;;1530:177;3744:44:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;5632:445:94:-;5768:7;5791:20;5814:42;5830:11;5843:12;5814:15;:42::i;:::-;5889:28;;5791:65;;-1:-1:-1;5871:15:94;:46;5867:98;;;5950:15;5919:46;;5867:98;5983:17;;:87;;6058:12;6030:8;:24;;;:40;;;;;;;:::i;:::-;;;;;;;5983:87;;;6003:8;:24;;;5976:94;5632:445;-1:-1:-1;;;;;5632:445:94:o;1303:160:42:-;1412:43;;;-1:-1:-1;;;;;3936:32:120;;1412:43:42;;;3918:51:120;3985:18;;;;3978:34;;;1412:43:42;;;;;;;;;;3891:18:120;;;;1412:43:42;;;;;;;;-1:-1:-1;;;;;1412:43:42;-1:-1:-1;;;1412:43:42;;;1385:71;;1405:5;;1385:19;:71::i;7084:141:23:-;8870:21;8560:40;-1:-1:-1;;;8560:40:23;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:23;;;;;;;;;;;1980:235:22;6931:20:23;:18;:20::i;:::-;-1:-1:-1;;;;;2076:26:22;::::1;2072:95;;2125:31;::::0;-1:-1:-1;;;2125:31:22;;2153:1:::1;2125:31;::::0;::::1;176:51:120::0;149:18;;2125:31:22::1;14:219:120::0;1217:210:94;1309:7;1335:17;;:85;;1359:61;1408:12;244:2:92;1360:44:94;;;1359:61;:::i;:::-;1335:85;;;1355:1;1328:92;1217:210;-1:-1:-1;;;1217:210:94:o;752:174::-;834:7;244:2:92;861:25:94;871:15;861:7;:25;:::i;:::-;860:59;;;752:174;-1:-1:-1;;;752:174:94:o;4751:510::-;4967:15;4994:23;5020:58;5042:8;5052:11;5065:12;5020:21;:58::i;:::-;4994:84;-1:-1:-1;5099:15:94;;:83;;-1:-1:-1;;;;;5160:22:94;;;;;;:13;;;:22;;;;;;5121:36;5129:15;5146:10;5121:7;:36::i;:::-;:61;;;;:::i;:::-;5099:83;;;5117:1;5099:83;5089:93;;5218:36;5226:15;5243:10;5218:7;:36::i;:::-;-1:-1:-1;;;;;5193:22:94;;;;;;;:13;;;;:22;;-1:-1:-1;5193:22:94;;;;:61;;;;-1:-1:-1;4751:510:94;;;-1:-1:-1;;;4751:510:94:o;4059:629:42:-;4478:23;4504:33;-1:-1:-1;;;;;4504:27:42;;4532:4;4504:27;:33::i;:::-;4478:59;;4551:10;:17;4572:1;4551:22;;:57;;;;;4589:10;4578:30;;;;;;;;;;;;:::i;:::-;4577:31;4551:57;4547:135;;;4631:40;;-1:-1:-1;;;4631:40:42;;-1:-1:-1;;;;;194:32:120;;4631:40:42;;;176:51:120;149:18;;4631:40:42;14:219:120;2705:151:43;2780:12;2811:38;2833:6;2841:4;2847:1;2780:12;3421;3435:23;3462:6;-1:-1:-1;;;;;3462:11:43;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;4793:408::-;5045:17;;:22;:49;;;;-1:-1:-1;;;;;;5071:18:43;;;:23;5045:49;5041:119;;;5121:24;;-1:-1:-1;;;5121:24:43;;-1:-1:-1;;;;;194:32:120;;5121:24:43;;;176:51:120;149:18;;5121:24:43;14:219:120;5041:119:43;-1:-1:-1;5180:10:43;5173:17;;5743:516;5874:17;;:21;5870:383;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;-1:-1:-1;;;6225:17:43;;;;;;;;;;;868:131:120;-1:-1:-1;;;;;943:31:120;;933:42;;923:70;;989:1;986;979:12;1004:521;1099:6;1107;1115;1123;1131;1184:3;1172:9;1163:7;1159:23;1155:33;1152:53;;;1201:1;1198;1191:12;1152:53;1240:9;1227:23;1259:31;1284:5;1259:31;:::i;:::-;1309:5;1361:2;1346:18;;1333:32;;-1:-1:-1;1412:2:120;1397:18;;1384:32;;1463:2;1448:18;;1435:32;;-1:-1:-1;1514:3:120;1499:19;1486:33;;-1:-1:-1;1004:521:120;-1:-1:-1;;;1004:521:120:o;1712:316::-;1789:6;1797;1805;1858:2;1846:9;1837:7;1833:23;1829:32;1826:52;;;1874:1;1871;1864:12;1826:52;-1:-1:-1;;1897:23:120;;;1967:2;1952:18;;1939:32;;-1:-1:-1;2018:2:120;2003:18;;;1990:32;;1712:316;-1:-1:-1;1712:316:120:o;2241:180::-;2300:6;2353:2;2341:9;2332:7;2328:23;2324:32;2321:52;;;2369:1;2366;2359:12;2321:52;-1:-1:-1;2392:23:120;;2241:180;-1:-1:-1;2241:180:120:o;2426:248::-;2494:6;2502;2555:2;2543:9;2534:7;2530:23;2526:32;2523:52;;;2571:1;2568;2561:12;2523:52;-1:-1:-1;;2594:23:120;;;2664:2;2649:18;;;2636:32;;-1:-1:-1;2426:248:120:o;2679:404::-;2763:6;2771;2824:2;2812:9;2803:7;2799:23;2795:32;2792:52;;;2840:1;2837;2830:12;2792:52;2879:9;2866:23;2898:31;2923:5;2898:31;:::i;:::-;2948:5;-1:-1:-1;3005:2:120;2990:18;;2977:32;3018:33;2977:32;3018:33;:::i;:::-;3070:7;3060:17;;;2679:404;;;;;:::o;3088:247::-;3147:6;3200:2;3188:9;3179:7;3175:23;3171:32;3168:52;;;3216:1;3213;3206:12;3168:52;3255:9;3242:23;3274:31;3299:5;3274:31;:::i;3340:383::-;3417:6;3425;3433;3486:2;3474:9;3465:7;3461:23;3457:32;3454:52;;;3502:1;3499;3492:12;3454:52;3541:9;3528:23;3560:31;3585:5;3560:31;:::i;:::-;3610:5;3662:2;3647:18;;3634:32;;-1:-1:-1;3713:2:120;3698:18;;;3685:32;;3340:383;-1:-1:-1;;;3340:383:120:o;4023:127::-;4084:10;4079:3;4075:20;4072:1;4065:31;4115:4;4112:1;4105:15;4139:4;4136:1;4129:15;4155:127;4216:10;4211:3;4207:20;4204:1;4197:31;4247:4;4244:1;4237:15;4271:4;4268:1;4261:15;4287:128;4354:9;;;4375:11;;;4372:37;;;4389:18;;:::i;4634:125::-;4699:9;;;4720:10;;;4717:36;;;4733:18;;:::i;4764:168::-;4837:9;;;4868;;4885:15;;;4879:22;;4865:37;4855:71;;4906:18;;:::i;5514:184::-;5584:6;5637:2;5625:9;5616:7;5612:23;5608:32;5605:52;;;5653:1;5650;5643:12;5605:52;-1:-1:-1;5676:16:120;;5514:184;-1:-1:-1;5514:184:120:o;6192:217::-;6232:1;6258;6248:132;;6302:10;6297:3;6293:20;6290:1;6283:31;6337:4;6334:1;6327:15;6365:4;6362:1;6355:15;6248:132;-1:-1:-1;6394:9:120;;6192:217::o;6414:277::-;6481:6;6534:2;6522:9;6513:7;6509:23;6505:32;6502:52;;;6550:1;6547;6540:12;6502:52;6582:9;6576:16;6635:5;6628:13;6621:21;6614:5;6611:32;6601:60;;6657:1;6654;6647:12;6696:412;6825:3;6863:6;6857:13;6888:1;6898:129;6912:6;6909:1;6906:13;6898:129;;;7010:4;6994:14;;;6990:25;;6984:32;6971:11;;;6964:53;6927:12;6898:129;;;-1:-1:-1;7082:1:120;7046:16;;7071:13;;;-1:-1:-1;7046:16:120;6696:412;-1:-1:-1;6696:412:120:o",
    "linkReferences": {},
    "immutableReferences": {
      "64921": [
        {
          "start": 628,
          "length": 32
        },
        {
          "start": 1435,
          "length": 32
        },
        {
          "start": 2225,
          "length": 32
        },
        {
          "start": 2690,
          "length": 32
        },
        {
          "start": 4023,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "acceptOwnership()": "79ba5097",
    "getCaller()": "ab470f05",
    "getPendingReward(address,uint256,uint256)": "c7183251",
    "getPid()": "c8772963",
    "getRewarderParameter()": "39cbec9d",
    "getToken()": "21df0da7",
    "initialize(address)": "c4d66de8",
    "isStopped()": "3f683b6a",
    "link(uint256)": "b1a867d5",
    "onModify(address,uint256,uint256,uint256,uint256)": "870b50fd",
    "owner()": "8da5cb5b",
    "pendingOwner()": "e30c3978",
    "renounceOwnership()": "715018a6",
    "setRewardPerSecond(uint256,uint256)": "b5f578fc",
    "setRewarderParameters(uint256,uint256,uint256)": "89f5ab0d",
    "stop()": "07da68f5",
    "sweep(address,address)": "b8dc491b",
    "transferOwnership(address)": "f2fde38b",
    "unlink(uint256)": "f1e023fd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__AlreadyStopped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedReward\",\"type\":\"uint256\"}],\"name\":\"BaseRewarder__InsufficientReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__InvalidDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"BaseRewarder__InvalidPid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"BaseRewarder__InvalidStartTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__NotNativeRewarder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__Stopped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseRewarder__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MasterChefRewarder__AlreadyLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MasterChefRewarder__NotLinked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MasterChefRewarder__UseUnlink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"RewardParameterUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewarderParameter\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldTotalSupply\",\"type\":\"uint256\"}],\"name\":\"onModify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedDuration\",\"type\":\"uint256\"}],\"name\":\"setRewarderParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"unlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Contract for distributing rewards to stakers in the MasterChef contract.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"details\":\"Constructor for MasterChefRewarder contract.\",\"params\":{\"caller\":\"The address of the contract that will call the onModify function.\"}},\"getCaller()\":{\"details\":\"Returns the address of the contract that calls the onModify function.\",\"returns\":{\"_0\":\"The address of the caller contract.\"}},\"getPendingReward(address,uint256,uint256)\":{\"details\":\"Returns the pending rewards for a given account.\",\"params\":{\"account\":\"The account to check for pending rewards.\",\"balance\":\"The balance of the account.\",\"totalSupply\":\"The total supply of the staking pool.\"},\"returns\":{\"_0\":\"The token and the amount of pending rewards.\"}},\"getPid()\":{\"details\":\"Returns the pool ID of the staking pool.\",\"returns\":{\"_0\":\"The pool ID.\"}},\"getRewarderParameter()\":{\"details\":\"Returns the rewarder parameter values.\",\"returns\":{\"endTimestamp\":\"The end timestamp.\",\"lastUpdateTimestamp\":\"The last update timestamp.\",\"rewardPerSecond\":\"The reward per second.\",\"token\":\"The token to be distributed as rewards.\"}},\"getToken()\":{\"details\":\"Returns the address of the token to be distributed as rewards.\",\"returns\":{\"_0\":\"The address of the token to be distributed as rewards.\"}},\"initialize(address)\":{\"details\":\"Initializes the BaseRewarder contract.\",\"params\":{\"initialOwner\":\"The initial owner of the contract.\"}},\"isStopped()\":{\"details\":\"Returns whether the reward distribution has been stopped.\",\"returns\":{\"_0\":\"True if the reward distribution has been stopped, false otherwise.\"}},\"link(uint256)\":{\"details\":\"Links the rewarder to the MasterChef contract. Can only be called by the caller contract and only once.\",\"params\":{\"pid\":\"The pool ID of the staking pool.\"}},\"onModify(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Called by the caller contract to update the rewards for a given account. If the rewarder is not linked, the function will revert.\",\"params\":{\"account\":\"The account to update rewards for.\",\"newBalance\":\"The new balance of the account.\",\"oldBalance\":\"The old balance of the account.\",\"oldTotalSupply\":\"The old total supply of the staking pool.\",\"pid\":\"The pool ID of the staking pool.\"},\"returns\":{\"reward\":\"The amount of rewards sent to the account.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setRewardPerSecond(uint256,uint256)\":{\"details\":\"Sets the reward per second and expected duration. If the expected duration is 0, the reward distribution will be stopped.\",\"params\":{\"expectedDuration\":\"The expected duration of the reward distribution.\",\"rewardPerSecond\":\"The new reward per second.\"}},\"setRewarderParameters(uint256,uint256,uint256)\":{\"details\":\"Sets the start of the reward distribution.\",\"params\":{\"startTimestamp\":\"The start timestamp.\"}},\"stop()\":{\"details\":\"Reverts as the MasterChefRewarder contract should be stopped by the unlink function.\"},\"sweep(address,address)\":{\"details\":\"Transfers any remaining tokens to the specified account. If the token is the reward token, only the excess amount will be transferred. If the rewarder is stopped, the entire balance will be transferred.\",\"params\":{\"account\":\"The account to transfer the tokens to.\",\"token\":\"The token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unlink(uint256)\":{\"details\":\"Unlinks the rewarder from the MasterChef contract. Can only be called by the caller contract and only once.\",\"params\":{\"pid\":\"The pool ID of the staking pool.\"}}},\"title\":\"MasterChef Rewarder Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/rewarders/MasterChefRewarder.sol\":\"MasterChefRewarder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@tj-dexv2/=lib/dexv2/\",\":dexv2/=lib/dexv2/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/dexv2/lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/dexv2/src/libraries/Clone.sol\":{\"keccak256\":\"0x07e80742324ba0e91af1221b07a2868ba736c42e02c29c216da047c9c13d6814\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74ef31549ae883e5249c2e7b324fe309eb152e0e654da7e4e9f89cc2e35534a3\",\"dweb:/ipfs/QmbMhooa3LV9RDrAzVYBpw4vAurHztt638vCuKF5E4ymjV\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://013b3cfd9d1e34dad409c3b9a340860e8651e61cda509de33599fb5102f62fe7\",\"dweb:/ipfs/QmTVjDKofM9Nst8w8LAA3HHgi1eCnGYBpFb7Nbat71e2xz\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc8d1401a44d84ede55b6641d58f63f12a83aecb0816d577d947392b55a6b43b\",\"dweb:/ipfs/QmUskJ7JGzg17MAgRoZfZ3p7P9uucsgm2fKyXQvxdLThLE\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"src/interfaces/IBaseRewarder.sol\":{\"keccak256\":\"0xca9ac748840673077ed96bb7b19e0a446dee3defec8e08732c8fe404cf68db67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c35c65509ebf2dc3cf7ab93861e2d9e14b64eae2a670deaa97e616cfd2cb0856\",\"dweb:/ipfs/QmPkePAppLp4bEduwezecWgsC5ZmTHFBkSxZP5x1iKg4Dm\"]},\"src/interfaces/IMasterChef.sol\":{\"keccak256\":\"0x68905f179ba4a12f472de1aafbcf2a15ed79147f635c5fa8e58ca2973dff297f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d2396da110e8e4284db6ffd666f373804cc2310c4f60ce943baa28e92fe947fe\",\"dweb:/ipfs/QmQcERNGwzV1JSxQypszykyYexTCmWUSKHRrsQH41RKghB\"]},\"src/interfaces/IMasterChefRewarder.sol\":{\"keccak256\":\"0xf78c61375f6ae6971a34405ed4e3d3bf550ae4553d6983473ebdc50fdc894ece\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5e8dc461533d21ce3895f8000d6f1e47e643c57568a58b7cbf69bd5724425914\",\"dweb:/ipfs/QmWXdcyKHBgAdSYoxQ2XKCZYpCwu2QSo7Xs6qk32geKFi4\"]},\"src/interfaces/IMoe.sol\":{\"keccak256\":\"0xd82b96b7028c91417dcfaac9b8f667fd1bd4bef976fd92c1065899fea455bb80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d84ba17d07a35608ebd436277c4eb87f51f414dcd4f4c9e68ec372b8d55df64f\",\"dweb:/ipfs/QmUqXg38YFMAj8MfrK1aZU4GfYpmCY2ShsAebjuKsNrK7R\"]},\"src/interfaces/IMoeStaking.sol\":{\"keccak256\":\"0xe8c3d92d94709ee46d90a409cb0fae1d7c6073fe2bb97b620f2478e69e0bef0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bda777e76f905c21b77e6f40183267713c35f66c9e248e3ace7dcefded1619a5\",\"dweb:/ipfs/QmfBAWmJHdHtCzbocp69cVPAKmmuu9HbCkJ2jwQxjfRgmC\"]},\"src/interfaces/IRewarderFactory.sol\":{\"keccak256\":\"0x9d916bdc9aa3000a6b7fd4d962b771a5738b2af6fdfb37760336fa08d87f543b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d86f37b1194a317b3ca9142846e53935205a286ee77d83be19b11ec13c73a33e\",\"dweb:/ipfs/QmPRxSHHuHjqg2jSjSKy7Ab4RWKQ6PWzu51DMoU79fFw7B\"]},\"src/interfaces/IVeMoe.sol\":{\"keccak256\":\"0xb7fe1cae59aa68b8d4c1ee4db7ba48be9106a0fc661771b8039c42b2863e9309\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec83880110d96b58528cb586d95c3548ef1b118ecb3c2183f1b1f0ee29661236\",\"dweb:/ipfs/QmTtBUeaa29pnWwnMtbEsanSGxiGEgtcVfsv95dZsgGuf4\"]},\"src/interfaces/IVeMoeRewarder.sol\":{\"keccak256\":\"0x109e3c880e1fb4d8e6ec6c0e940e841f65a93d0a9f0e4350cc59adc99bddb6e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://978e5371f8999dbcb549f0305c2ed86e73de32b1c1613e1ac01745c129f0a47f\",\"dweb:/ipfs/QmSHt2aFnT9Ur1BggqwToRUos2i5EgKPuZNExL7nFsmzys\"]},\"src/libraries/Amounts.sol\":{\"keccak256\":\"0x8c02c681ac3b480f80849ffb45e3617ec6703b28a602d8404f9cc91aab3df90e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8995faef4edb4c999101f3d5d540feb6e5eb4a70dd91886275be93e80efabd67\",\"dweb:/ipfs/Qmf55uswSaA8XmgXnPWmFpatXytqpimsejYxyicD3L1VnH\"]},\"src/libraries/Constants.sol\":{\"keccak256\":\"0x5618d7d73bb9a9e4e8089abb977e8b40dff5bf3df343707c2062779355dbd3bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df903bf60ca89d038a4fd46c2110e5d068174787d4d31adce93bf6ef0196608f\",\"dweb:/ipfs/QmPJXDctmZCYKF8gjLzgFUQZSbd8MekcNWjNPAE7tuc9t9\"]},\"src/libraries/Math.sol\":{\"keccak256\":\"0xac46579a8984803e631b34e2776a53ee50ddc43cc3d9cbc02b131109241da2ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d5ad9855b5f7f2b0b4aea3078b90a6f0943a29ff0e257892f85bd80655d1daf\",\"dweb:/ipfs/QmZ6Qj9BRABTvWmZ6KgK7R1wqwBGioXBBpqYpFYX5NYowD\"]},\"src/libraries/Rewarder.sol\":{\"keccak256\":\"0x97be97a5d83b92da15ba49dceda7caeb365e7fbb796e57945a1cc5d0b74e8874\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3b5db3b69abf2411be3755aa42c860db6f28453c4ee9572f8b0dcca926c174fb\",\"dweb:/ipfs/QmYLTfjLRMEJvH8yDQy34yWiPyotvfDXystx7EbaWyngS7\"]},\"src/rewarders/BaseRewarder.sol\":{\"keccak256\":\"0x1526ee8099c1ddb579fdaf37761cd75053b075ab2a0c1224dc2662dea7270d32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e2fff6a3035b7018be8b7ab723104afff03f3e088e5afba8e01756e012079e9\",\"dweb:/ipfs/QmQ7jrqsuMpwvG5v2aSmD8Z9CvVSDSMuVBfZrQD2p48bx6\"]},\"src/rewarders/MasterChefRewarder.sol\":{\"keccak256\":\"0xd2bf6f7bcaf06054a99084b86f26450e51e1d77fb6c8b6fd0b20e22461ae27b1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51afc2886a56f9c9f1513cd7592e0a5e496aa21994f21b2cd1b1423489eedc92\",\"dweb:/ipfs/QmNS8VGyUAi1jRvzB3WLbpJ8QzYNoKMK5iys9DhtPbKHYE\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "AddressEmptyCode"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "AddressInsufficientBalance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__AlreadyStopped"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "remainingReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedReward",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "BaseRewarder__InsufficientReward"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__InvalidCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__InvalidDuration"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "BaseRewarder__InvalidPid"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "BaseRewarder__InvalidStartTimestamp"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__NativeTransferFailed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__NotNativeRewarder"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__Stopped"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BaseRewarder__ZeroAmount"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "FailedInnerCall"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidInitialization"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MasterChefRewarder__AlreadyLinked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MasterChefRewarder__NotLinked"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MasterChefRewarder__UseUnlink"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotInitializing"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableInvalidOwner"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OwnableUnauthorizedAccount"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "SafeERC20FailedOperation"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Claim",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "version",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferStarted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "rewardPerSecond",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RewardParameterUpdated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "fallback"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getCaller",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPendingReward",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPid",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRewarderParameter",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initialOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "isStopped",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "link"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oldBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oldTotalSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onModify",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "rewardPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedDuration",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRewardPerSecond"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "rewardPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedDuration",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRewarderParameters"
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "stop"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "sweep"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unlink"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptOwnership()": {
            "details": "The new owner accepts the ownership transfer."
          },
          "constructor": {
            "details": "Constructor for MasterChefRewarder contract.",
            "params": {
              "caller": "The address of the contract that will call the onModify function."
            }
          },
          "getCaller()": {
            "details": "Returns the address of the contract that calls the onModify function.",
            "returns": {
              "_0": "The address of the caller contract."
            }
          },
          "getPendingReward(address,uint256,uint256)": {
            "details": "Returns the pending rewards for a given account.",
            "params": {
              "account": "The account to check for pending rewards.",
              "balance": "The balance of the account.",
              "totalSupply": "The total supply of the staking pool."
            },
            "returns": {
              "_0": "The token and the amount of pending rewards."
            }
          },
          "getPid()": {
            "details": "Returns the pool ID of the staking pool.",
            "returns": {
              "_0": "The pool ID."
            }
          },
          "getRewarderParameter()": {
            "details": "Returns the rewarder parameter values.",
            "returns": {
              "endTimestamp": "The end timestamp.",
              "lastUpdateTimestamp": "The last update timestamp.",
              "rewardPerSecond": "The reward per second.",
              "token": "The token to be distributed as rewards."
            }
          },
          "getToken()": {
            "details": "Returns the address of the token to be distributed as rewards.",
            "returns": {
              "_0": "The address of the token to be distributed as rewards."
            }
          },
          "initialize(address)": {
            "details": "Initializes the BaseRewarder contract.",
            "params": {
              "initialOwner": "The initial owner of the contract."
            }
          },
          "isStopped()": {
            "details": "Returns whether the reward distribution has been stopped.",
            "returns": {
              "_0": "True if the reward distribution has been stopped, false otherwise."
            }
          },
          "link(uint256)": {
            "details": "Links the rewarder to the MasterChef contract. Can only be called by the caller contract and only once.",
            "params": {
              "pid": "The pool ID of the staking pool."
            }
          },
          "onModify(address,uint256,uint256,uint256,uint256)": {
            "details": "Called by the caller contract to update the rewards for a given account. If the rewarder is not linked, the function will revert.",
            "params": {
              "account": "The account to update rewards for.",
              "newBalance": "The new balance of the account.",
              "oldBalance": "The old balance of the account.",
              "oldTotalSupply": "The old total supply of the staking pool.",
              "pid": "The pool ID of the staking pool."
            },
            "returns": {
              "reward": "The amount of rewards sent to the account."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pendingOwner()": {
            "details": "Returns the address of the pending owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "setRewardPerSecond(uint256,uint256)": {
            "details": "Sets the reward per second and expected duration. If the expected duration is 0, the reward distribution will be stopped.",
            "params": {
              "expectedDuration": "The expected duration of the reward distribution.",
              "rewardPerSecond": "The new reward per second."
            }
          },
          "setRewarderParameters(uint256,uint256,uint256)": {
            "details": "Sets the start of the reward distribution.",
            "params": {
              "startTimestamp": "The start timestamp."
            }
          },
          "stop()": {
            "details": "Reverts as the MasterChefRewarder contract should be stopped by the unlink function."
          },
          "sweep(address,address)": {
            "details": "Transfers any remaining tokens to the specified account. If the token is the reward token, only the excess amount will be transferred. If the rewarder is stopped, the entire balance will be transferred.",
            "params": {
              "account": "The account to transfer the tokens to.",
              "token": "The token to transfer."
            }
          },
          "transferOwnership(address)": {
            "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
          },
          "unlink(uint256)": {
            "details": "Unlinks the rewarder from the MasterChef contract. Can only be called by the caller contract and only once.",
            "params": {
              "pid": "The pool ID of the staking pool."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@tj-dexv2/=lib/dexv2/",
        "dexv2/=lib/dexv2/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/dexv2/lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/rewarders/MasterChefRewarder.sol": "MasterChefRewarder"
      },
      "libraries": {}
    },
    "sources": {
      "lib/dexv2/src/libraries/Clone.sol": {
        "keccak256": "0x07e80742324ba0e91af1221b07a2868ba736c42e02c29c216da047c9c13d6814",
        "urls": [
          "bzz-raw://74ef31549ae883e5249c2e7b324fe309eb152e0e654da7e4e9f89cc2e35534a3",
          "dweb:/ipfs/QmbMhooa3LV9RDrAzVYBpw4vAurHztt638vCuKF5E4ymjV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol": {
        "keccak256": "0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f",
        "urls": [
          "bzz-raw://013b3cfd9d1e34dad409c3b9a340860e8651e61cda509de33599fb5102f62fe7",
          "dweb:/ipfs/QmTVjDKofM9Nst8w8LAA3HHgi1eCnGYBpFb7Nbat71e2xz"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
        "keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
        "urls": [
          "bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
          "dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
        "urls": [
          "bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
          "dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "keccak256": "0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c",
        "urls": [
          "bzz-raw://dc8d1401a44d84ede55b6641d58f63f12a83aecb0816d577d947392b55a6b43b",
          "dweb:/ipfs/QmUskJ7JGzg17MAgRoZfZ3p7P9uucsgm2fKyXQvxdLThLE"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
        "urls": [
          "bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
          "dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
        "urls": [
          "bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
          "dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
        "urls": [
          "bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
          "dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
        "urls": [
          "bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
          "dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
        ],
        "license": "MIT"
      },
      "src/interfaces/IBaseRewarder.sol": {
        "keccak256": "0xca9ac748840673077ed96bb7b19e0a446dee3defec8e08732c8fe404cf68db67",
        "urls": [
          "bzz-raw://c35c65509ebf2dc3cf7ab93861e2d9e14b64eae2a670deaa97e616cfd2cb0856",
          "dweb:/ipfs/QmPkePAppLp4bEduwezecWgsC5ZmTHFBkSxZP5x1iKg4Dm"
        ],
        "license": "MIT"
      },
      "src/interfaces/IMasterChef.sol": {
        "keccak256": "0x68905f179ba4a12f472de1aafbcf2a15ed79147f635c5fa8e58ca2973dff297f",
        "urls": [
          "bzz-raw://d2396da110e8e4284db6ffd666f373804cc2310c4f60ce943baa28e92fe947fe",
          "dweb:/ipfs/QmQcERNGwzV1JSxQypszykyYexTCmWUSKHRrsQH41RKghB"
        ],
        "license": "MIT"
      },
      "src/interfaces/IMasterChefRewarder.sol": {
        "keccak256": "0xf78c61375f6ae6971a34405ed4e3d3bf550ae4553d6983473ebdc50fdc894ece",
        "urls": [
          "bzz-raw://5e8dc461533d21ce3895f8000d6f1e47e643c57568a58b7cbf69bd5724425914",
          "dweb:/ipfs/QmWXdcyKHBgAdSYoxQ2XKCZYpCwu2QSo7Xs6qk32geKFi4"
        ],
        "license": "MIT"
      },
      "src/interfaces/IMoe.sol": {
        "keccak256": "0xd82b96b7028c91417dcfaac9b8f667fd1bd4bef976fd92c1065899fea455bb80",
        "urls": [
          "bzz-raw://d84ba17d07a35608ebd436277c4eb87f51f414dcd4f4c9e68ec372b8d55df64f",
          "dweb:/ipfs/QmUqXg38YFMAj8MfrK1aZU4GfYpmCY2ShsAebjuKsNrK7R"
        ],
        "license": "MIT"
      },
      "src/interfaces/IMoeStaking.sol": {
        "keccak256": "0xe8c3d92d94709ee46d90a409cb0fae1d7c6073fe2bb97b620f2478e69e0bef0a",
        "urls": [
          "bzz-raw://bda777e76f905c21b77e6f40183267713c35f66c9e248e3ace7dcefded1619a5",
          "dweb:/ipfs/QmfBAWmJHdHtCzbocp69cVPAKmmuu9HbCkJ2jwQxjfRgmC"
        ],
        "license": "MIT"
      },
      "src/interfaces/IRewarderFactory.sol": {
        "keccak256": "0x9d916bdc9aa3000a6b7fd4d962b771a5738b2af6fdfb37760336fa08d87f543b",
        "urls": [
          "bzz-raw://d86f37b1194a317b3ca9142846e53935205a286ee77d83be19b11ec13c73a33e",
          "dweb:/ipfs/QmPRxSHHuHjqg2jSjSKy7Ab4RWKQ6PWzu51DMoU79fFw7B"
        ],
        "license": "MIT"
      },
      "src/interfaces/IVeMoe.sol": {
        "keccak256": "0xb7fe1cae59aa68b8d4c1ee4db7ba48be9106a0fc661771b8039c42b2863e9309",
        "urls": [
          "bzz-raw://ec83880110d96b58528cb586d95c3548ef1b118ecb3c2183f1b1f0ee29661236",
          "dweb:/ipfs/QmTtBUeaa29pnWwnMtbEsanSGxiGEgtcVfsv95dZsgGuf4"
        ],
        "license": "MIT"
      },
      "src/interfaces/IVeMoeRewarder.sol": {
        "keccak256": "0x109e3c880e1fb4d8e6ec6c0e940e841f65a93d0a9f0e4350cc59adc99bddb6e5",
        "urls": [
          "bzz-raw://978e5371f8999dbcb549f0305c2ed86e73de32b1c1613e1ac01745c129f0a47f",
          "dweb:/ipfs/QmSHt2aFnT9Ur1BggqwToRUos2i5EgKPuZNExL7nFsmzys"
        ],
        "license": "MIT"
      },
      "src/libraries/Amounts.sol": {
        "keccak256": "0x8c02c681ac3b480f80849ffb45e3617ec6703b28a602d8404f9cc91aab3df90e",
        "urls": [
          "bzz-raw://8995faef4edb4c999101f3d5d540feb6e5eb4a70dd91886275be93e80efabd67",
          "dweb:/ipfs/Qmf55uswSaA8XmgXnPWmFpatXytqpimsejYxyicD3L1VnH"
        ],
        "license": "MIT"
      },
      "src/libraries/Constants.sol": {
        "keccak256": "0x5618d7d73bb9a9e4e8089abb977e8b40dff5bf3df343707c2062779355dbd3bd",
        "urls": [
          "bzz-raw://df903bf60ca89d038a4fd46c2110e5d068174787d4d31adce93bf6ef0196608f",
          "dweb:/ipfs/QmPJXDctmZCYKF8gjLzgFUQZSbd8MekcNWjNPAE7tuc9t9"
        ],
        "license": "MIT"
      },
      "src/libraries/Math.sol": {
        "keccak256": "0xac46579a8984803e631b34e2776a53ee50ddc43cc3d9cbc02b131109241da2ef",
        "urls": [
          "bzz-raw://1d5ad9855b5f7f2b0b4aea3078b90a6f0943a29ff0e257892f85bd80655d1daf",
          "dweb:/ipfs/QmZ6Qj9BRABTvWmZ6KgK7R1wqwBGioXBBpqYpFYX5NYowD"
        ],
        "license": "MIT"
      },
      "src/libraries/Rewarder.sol": {
        "keccak256": "0x97be97a5d83b92da15ba49dceda7caeb365e7fbb796e57945a1cc5d0b74e8874",
        "urls": [
          "bzz-raw://3b5db3b69abf2411be3755aa42c860db6f28453c4ee9572f8b0dcca926c174fb",
          "dweb:/ipfs/QmYLTfjLRMEJvH8yDQy34yWiPyotvfDXystx7EbaWyngS7"
        ],
        "license": "MIT"
      },
      "src/rewarders/BaseRewarder.sol": {
        "keccak256": "0x1526ee8099c1ddb579fdaf37761cd75053b075ab2a0c1224dc2662dea7270d32",
        "urls": [
          "bzz-raw://2e2fff6a3035b7018be8b7ab723104afff03f3e088e5afba8e01756e012079e9",
          "dweb:/ipfs/QmQ7jrqsuMpwvG5v2aSmD8Z9CvVSDSMuVBfZrQD2p48bx6"
        ],
        "license": "MIT"
      },
      "src/rewarders/MasterChefRewarder.sol": {
        "keccak256": "0xd2bf6f7bcaf06054a99084b86f26450e51e1d77fb6c8b6fd0b20e22461ae27b1",
        "urls": [
          "bzz-raw://51afc2886a56f9c9f1513cd7592e0a5e496aa21994f21b2cd1b1423489eedc92",
          "dweb:/ipfs/QmNS8VGyUAi1jRvzB3WLbpJ8QzYNoKMK5iys9DhtPbKHYE"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/rewarders/MasterChefRewarder.sol",
    "id": 65917,
    "exportedSymbols": {
      "BaseRewarder": [
        65580
      ],
      "IBaseRewarder": [
        63229
      ],
      "IERC20": [
        46102
      ],
      "IMasterChef": [
        63558
      ],
      "IMasterChefRewarder": [
        63585
      ],
      "MasterChefRewarder": [
        65916
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:3766:97",
    "nodes": [
      {
        "id": 65705,
        "nodeType": "PragmaDirective",
        "src": "32:24:97",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".20"
        ]
      },
      {
        "id": 65707,
        "nodeType": "ImportDirective",
        "src": "58:70:97",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 65917,
        "sourceUnit": 46103,
        "symbolAliases": [
          {
            "foreign": {
              "id": 65706,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46102,
              "src": "66:6:97",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 65709,
        "nodeType": "ImportDirective",
        "src": "130:74:97",
        "nodes": [],
        "absolutePath": "src/interfaces/IMasterChefRewarder.sol",
        "file": "../interfaces/IMasterChefRewarder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 65917,
        "sourceUnit": 63586,
        "symbolAliases": [
          {
            "foreign": {
              "id": 65708,
              "name": "IMasterChefRewarder",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 63585,
              "src": "138:19:97",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 65711,
        "nodeType": "ImportDirective",
        "src": "205:58:97",
        "nodes": [],
        "absolutePath": "src/interfaces/IMasterChef.sol",
        "file": "../interfaces/IMasterChef.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 65917,
        "sourceUnit": 63559,
        "symbolAliases": [
          {
            "foreign": {
              "id": 65710,
              "name": "IMasterChef",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 63558,
              "src": "213:11:97",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 65714,
        "nodeType": "ImportDirective",
        "src": "264:63:97",
        "nodes": [],
        "absolutePath": "src/rewarders/BaseRewarder.sol",
        "file": "./BaseRewarder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 65917,
        "sourceUnit": 65581,
        "symbolAliases": [
          {
            "foreign": {
              "id": 65712,
              "name": "BaseRewarder",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 65580,
              "src": "272:12:97",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 65713,
              "name": "IBaseRewarder",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 63229,
              "src": "286:13:97",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 65916,
        "nodeType": "ContractDefinition",
        "src": "457:3340:97",
        "nodes": [
          {
            "id": 65722,
            "nodeType": "VariableDeclaration",
            "src": "528:23:97",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "_status",
            "nameLocation": "544:7:97",
            "scope": 65916,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_Status_$63574",
              "typeString": "enum IMasterChefRewarder.Status"
            },
            "typeName": {
              "id": 65721,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 65720,
                "name": "Status",
                "nameLocations": [
                  "528:6:97"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 63574,
                "src": "528:6:97"
              },
              "referencedDeclaration": 63574,
              "src": "528:6:97",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_Status_$63574",
                "typeString": "enum IMasterChefRewarder.Status"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 65732,
            "nodeType": "FunctionDefinition",
            "src": "718:51:97",
            "nodes": [],
            "body": {
              "id": 65731,
              "nodeType": "Block",
              "src": "767:2:97",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 65723,
              "nodeType": "StructuredDocumentation",
              "src": "558:155:97",
              "text": " @dev Constructor for MasterChefRewarder contract.\n @param caller The address of the contract that will call the onModify function."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 65728,
                    "name": "caller",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 65725,
                    "src": "759:6:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 65729,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 65727,
                  "name": "BaseRewarder",
                  "nameLocations": [
                    "746:12:97"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 65580,
                  "src": "746:12:97"
                },
                "nodeType": "ModifierInvocation",
                "src": "746:20:97"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 65726,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65725,
                  "mutability": "mutable",
                  "name": "caller",
                  "nameLocation": "738:6:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65732,
                  "src": "730:14:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 65724,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "730:7:97",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "729:16:97"
            },
            "returnParameters": {
              "id": 65730,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "767:0:97"
            },
            "scope": 65916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 65775,
            "nodeType": "FunctionDefinition",
            "src": "965:362:97",
            "nodes": [],
            "body": {
              "id": 65774,
              "nodeType": "Block",
              "src": "1008:319:97",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 65742,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 65739,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1022:3:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 65740,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1026:6:97",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1022:10:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 65741,
                      "name": "_caller",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64921,
                      "src": "1036:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1022:21:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65746,
                  "nodeType": "IfStatement",
                  "src": "1018:63:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65743,
                        "name": "BaseRewarder__InvalidCaller",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63093,
                        "src": "1052:27:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 65744,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1052:29:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65745,
                    "nodeType": "RevertStatement",
                    "src": "1045:36:97"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_Status_$63574",
                      "typeString": "enum IMasterChefRewarder.Status"
                    },
                    "id": 65750,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 65747,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65722,
                      "src": "1095:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "expression": {
                        "id": 65748,
                        "name": "Status",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63574,
                        "src": "1106:6:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Status_$63574_$",
                          "typeString": "type(enum IMasterChefRewarder.Status)"
                        }
                      },
                      "id": 65749,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1113:8:97",
                      "memberName": "Unlinked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63571,
                      "src": "1106:15:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "src": "1095:26:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65754,
                  "nodeType": "IfStatement",
                  "src": "1091:74:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65751,
                        "name": "MasterChefRewarder__AlreadyLinked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63566,
                        "src": "1130:33:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 65752,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1130:35:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65753,
                    "nodeType": "RevertStatement",
                    "src": "1123:42:97"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 65758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 65755,
                      "name": "pid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65735,
                      "src": "1179:3:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65756,
                        "name": "_pid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          65899
                        ],
                        "referencedDeclaration": 65899,
                        "src": "1186:4:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
                          "typeString": "function () pure returns (uint256)"
                        }
                      },
                      "id": 65757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1186:6:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1179:13:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65763,
                  "nodeType": "IfStatement",
                  "src": "1175:55:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "id": 65760,
                          "name": "pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65735,
                          "src": "1226:3:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 65759,
                        "name": "BaseRewarder__InvalidPid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63113,
                        "src": "1201:24:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                          "typeString": "function (uint256) pure"
                        }
                      },
                      "id": 65761,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1201:29:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65762,
                    "nodeType": "RevertStatement",
                    "src": "1194:36:97"
                  }
                },
                {
                  "condition": {
                    "id": 65764,
                    "name": "_isStopped",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 64931,
                    "src": "1244:10:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65768,
                  "nodeType": "IfStatement",
                  "src": "1240:46:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65765,
                        "name": "BaseRewarder__Stopped",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63095,
                        "src": "1263:21:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 65766,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1263:23:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65767,
                    "nodeType": "RevertStatement",
                    "src": "1256:30:97"
                  }
                },
                {
                  "expression": {
                    "id": 65772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65769,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65722,
                      "src": "1297:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 65770,
                        "name": "Status",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63574,
                        "src": "1307:6:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Status_$63574_$",
                          "typeString": "type(enum IMasterChefRewarder.Status)"
                        }
                      },
                      "id": 65771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1314:6:97",
                      "memberName": "Linked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63572,
                      "src": "1307:13:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "src": "1297:23:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$63574",
                      "typeString": "enum IMasterChefRewarder.Status"
                    }
                  },
                  "id": 65773,
                  "nodeType": "ExpressionStatement",
                  "src": "1297:23:97"
                }
              ]
            },
            "baseFunctions": [
              63579
            ],
            "documentation": {
              "id": 65733,
              "nodeType": "StructuredDocumentation",
              "src": "775:185:97",
              "text": " @dev Links the rewarder to the MasterChef contract.\n Can only be called by the caller contract and only once.\n @param pid The pool ID of the staking pool."
            },
            "functionSelector": "b1a867d5",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "link",
            "nameLocation": "974:4:97",
            "overrides": {
              "id": 65737,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "999:8:97"
            },
            "parameters": {
              "id": 65736,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65735,
                  "mutability": "mutable",
                  "name": "pid",
                  "nameLocation": "987:3:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65775,
                  "src": "979:11:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65734,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "979:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "978:13:97"
            },
            "returnParameters": {
              "id": 65738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:0:97"
            },
            "scope": 65916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 65817,
            "nodeType": "FunctionDefinition",
            "src": "1527:330:97",
            "nodes": [],
            "body": {
              "id": 65816,
              "nodeType": "Block",
              "src": "1572:285:97",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 65785,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 65782,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1586:3:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 65783,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1590:6:97",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1586:10:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 65784,
                      "name": "_caller",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64921,
                      "src": "1600:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1586:21:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65789,
                  "nodeType": "IfStatement",
                  "src": "1582:63:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65786,
                        "name": "BaseRewarder__InvalidCaller",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63093,
                        "src": "1616:27:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 65787,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1616:29:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65788,
                    "nodeType": "RevertStatement",
                    "src": "1609:36:97"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 65793,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 65790,
                      "name": "pid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65778,
                      "src": "1659:3:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65791,
                        "name": "_pid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          65899
                        ],
                        "referencedDeclaration": 65899,
                        "src": "1666:4:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
                          "typeString": "function () pure returns (uint256)"
                        }
                      },
                      "id": 65792,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1666:6:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1659:13:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65798,
                  "nodeType": "IfStatement",
                  "src": "1655:55:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "id": 65795,
                          "name": "pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65778,
                          "src": "1706:3:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 65794,
                        "name": "BaseRewarder__InvalidPid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63113,
                        "src": "1681:24:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                          "typeString": "function (uint256) pure"
                        }
                      },
                      "id": 65796,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1681:29:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65797,
                    "nodeType": "RevertStatement",
                    "src": "1674:36:97"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_Status_$63574",
                      "typeString": "enum IMasterChefRewarder.Status"
                    },
                    "id": 65802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 65799,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65722,
                      "src": "1724:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "expression": {
                        "id": 65800,
                        "name": "Status",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63574,
                        "src": "1735:6:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Status_$63574_$",
                          "typeString": "type(enum IMasterChefRewarder.Status)"
                        }
                      },
                      "id": 65801,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1742:6:97",
                      "memberName": "Linked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63572,
                      "src": "1735:13:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "src": "1724:24:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65806,
                  "nodeType": "IfStatement",
                  "src": "1720:68:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65803,
                        "name": "MasterChefRewarder__NotLinked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63568,
                        "src": "1757:29:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 65804,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1757:31:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65805,
                    "nodeType": "RevertStatement",
                    "src": "1750:38:97"
                  }
                },
                {
                  "expression": {
                    "id": 65810,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65807,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65722,
                      "src": "1799:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 65808,
                        "name": "Status",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63574,
                        "src": "1809:6:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Status_$63574_$",
                          "typeString": "type(enum IMasterChefRewarder.Status)"
                        }
                      },
                      "id": 65809,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "1816:7:97",
                      "memberName": "Stopped",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63573,
                      "src": "1809:14:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "src": "1799:24:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$63574",
                      "typeString": "enum IMasterChefRewarder.Status"
                    }
                  },
                  "id": 65811,
                  "nodeType": "ExpressionStatement",
                  "src": "1799:24:97"
                },
                {
                  "expression": {
                    "id": 65814,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65812,
                      "name": "_isStopped",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64931,
                      "src": "1833:10:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 65813,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1846:4:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1833:17:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65815,
                  "nodeType": "ExpressionStatement",
                  "src": "1833:17:97"
                }
              ]
            },
            "baseFunctions": [
              63584
            ],
            "documentation": {
              "id": 65776,
              "nodeType": "StructuredDocumentation",
              "src": "1333:189:97",
              "text": " @dev Unlinks the rewarder from the MasterChef contract.\n Can only be called by the caller contract and only once.\n @param pid The pool ID of the staking pool."
            },
            "functionSelector": "f1e023fd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "unlink",
            "nameLocation": "1536:6:97",
            "overrides": {
              "id": 65780,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1563:8:97"
            },
            "parameters": {
              "id": 65779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65778,
                  "mutability": "mutable",
                  "name": "pid",
                  "nameLocation": "1551:3:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65817,
                  "src": "1543:11:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65777,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1543:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1542:13:97"
            },
            "returnParameters": {
              "id": 65781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1572:0:97"
            },
            "scope": 65916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 65828,
            "nodeType": "FunctionDefinition",
            "src": "1976:121:97",
            "nodes": [],
            "body": {
              "id": 65827,
              "nodeType": "Block",
              "src": "2042:55:97",
              "nodes": [],
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 65824,
                      "name": "MasterChefRewarder__UseUnlink",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63570,
                      "src": "2059:29:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 65825,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2059:31:97",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 65826,
                  "nodeType": "RevertStatement",
                  "src": "2052:38:97"
                }
              ]
            },
            "baseFunctions": [
              63205,
              65163
            ],
            "documentation": {
              "id": 65818,
              "nodeType": "StructuredDocumentation",
              "src": "1863:108:97",
              "text": " @dev Reverts as the MasterChefRewarder contract should be stopped by the unlink function."
            },
            "functionSelector": "07da68f5",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stop",
            "nameLocation": "1985:4:97",
            "overrides": {
              "id": 65822,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 65820,
                  "name": "IBaseRewarder",
                  "nameLocations": [
                    "2013:13:97"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 63229,
                  "src": "2013:13:97"
                },
                {
                  "id": 65821,
                  "name": "BaseRewarder",
                  "nameLocations": [
                    "2028:12:97"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 65580,
                  "src": "2028:12:97"
                }
              ],
              "src": "2004:37:97"
            },
            "parameters": {
              "id": 65819,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1989:2:97"
            },
            "returnParameters": {
              "id": 65823,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2042:0:97"
            },
            "scope": 65916,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 65872,
            "nodeType": "FunctionDefinition",
            "src": "2626:424:97",
            "nodes": [],
            "body": {
              "id": 65871,
              "nodeType": "Block",
              "src": "2836:214:97",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_Status_$63574",
                      "typeString": "enum IMasterChefRewarder.Status"
                    },
                    "id": 65850,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 65847,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65722,
                      "src": "2850:7:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "expression": {
                        "id": 65848,
                        "name": "Status",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63574,
                        "src": "2861:6:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Status_$63574_$",
                          "typeString": "type(enum IMasterChefRewarder.Status)"
                        }
                      },
                      "id": 65849,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "2868:6:97",
                      "memberName": "Linked",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63572,
                      "src": "2861:13:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Status_$63574",
                        "typeString": "enum IMasterChefRewarder.Status"
                      }
                    },
                    "src": "2850:24:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 65854,
                  "nodeType": "IfStatement",
                  "src": "2846:68:97",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 65851,
                        "name": "MasterChefRewarder__NotLinked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 63568,
                        "src": "2883:29:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 65852,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2883:31:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 65853,
                    "nodeType": "RevertStatement",
                    "src": "2876:38:97"
                  }
                },
                {
                  "expression": {
                    "id": 65864,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65855,
                      "name": "reward",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65845,
                      "src": "2925:6:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 65858,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65831,
                          "src": "2956:7:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 65859,
                          "name": "pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65833,
                          "src": "2965:3:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 65860,
                          "name": "oldBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65835,
                          "src": "2970:10:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 65861,
                          "name": "newBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65837,
                          "src": "2982:10:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 65862,
                          "name": "oldTotalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65839,
                          "src": "2994:14:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 65856,
                          "name": "BaseRewarder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65580,
                          "src": "2934:12:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_BaseRewarder_$65580_$",
                            "typeString": "type(contract BaseRewarder)"
                          }
                        },
                        "id": 65857,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2947:8:97",
                        "memberName": "onModify",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 65254,
                        "src": "2934:21:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (address,uint256,uint256,uint256,uint256) returns (uint256)"
                        }
                      },
                      "id": 65863,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2934:75:97",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2925:84:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 65865,
                  "nodeType": "ExpressionStatement",
                  "src": "2925:84:97"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 65867,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65831,
                        "src": "3027:7:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 65868,
                        "name": "reward",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 65845,
                        "src": "3036:6:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 65866,
                      "name": "_claim",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 65370,
                      "src": "3020:6:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 65869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3020:23:97",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 65870,
                  "nodeType": "ExpressionStatement",
                  "src": "3020:23:97"
                }
              ]
            },
            "baseFunctions": [
              63228,
              65254
            ],
            "documentation": {
              "id": 65829,
              "nodeType": "StructuredDocumentation",
              "src": "2103:518:97",
              "text": " @dev Called by the caller contract to update the rewards for a given account.\n If the rewarder is not linked, the function will revert.\n @param account The account to update rewards for.\n @param pid The pool ID of the staking pool.\n @param oldBalance The old balance of the account.\n @param newBalance The new balance of the account.\n @param oldTotalSupply The old total supply of the staking pool.\n @return reward The amount of rewards sent to the account."
            },
            "functionSelector": "870b50fd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "onModify",
            "nameLocation": "2635:8:97",
            "overrides": {
              "id": 65843,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 65841,
                  "name": "BaseRewarder",
                  "nameLocations": [
                    "2770:12:97"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 65580,
                  "src": "2770:12:97"
                },
                {
                  "id": 65842,
                  "name": "IBaseRewarder",
                  "nameLocations": [
                    "2784:13:97"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 63229,
                  "src": "2784:13:97"
                }
              ],
              "src": "2761:37:97"
            },
            "parameters": {
              "id": 65840,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65831,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2652:7:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65872,
                  "src": "2644:15:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 65830,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2644:7:97",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 65833,
                  "mutability": "mutable",
                  "name": "pid",
                  "nameLocation": "2669:3:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65872,
                  "src": "2661:11:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65832,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2661:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 65835,
                  "mutability": "mutable",
                  "name": "oldBalance",
                  "nameLocation": "2682:10:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65872,
                  "src": "2674:18:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65834,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2674:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 65837,
                  "mutability": "mutable",
                  "name": "newBalance",
                  "nameLocation": "2702:10:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65872,
                  "src": "2694:18:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65836,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2694:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 65839,
                  "mutability": "mutable",
                  "name": "oldTotalSupply",
                  "nameLocation": "2722:14:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65872,
                  "src": "2714:22:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65838,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2714:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2643:94:97"
            },
            "returnParameters": {
              "id": 65846,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65845,
                  "mutability": "mutable",
                  "name": "reward",
                  "nameLocation": "2824:6:97",
                  "nodeType": "VariableDeclaration",
                  "scope": 65872,
                  "src": "2816:14:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65844,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2816:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2815:16:97"
            },
            "scope": 65916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 65887,
            "nodeType": "FunctionDefinition",
            "src": "3217:107:97",
            "nodes": [],
            "body": {
              "id": 65886,
              "nodeType": "Block",
              "src": "3275:49:97",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 65882,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3314:1:97",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 65881,
                          "name": "_getArgAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3299:14:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_address_$",
                            "typeString": "function (uint256) pure returns (address)"
                          }
                        },
                        "id": 65883,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3299:17:97",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 65880,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46102,
                      "src": "3292:6:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$46102_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 65884,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3292:25:97",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$46102",
                      "typeString": "contract IERC20"
                    }
                  },
                  "functionReturnParameters": 65879,
                  "id": 65885,
                  "nodeType": "Return",
                  "src": "3285:32:97"
                }
              ]
            },
            "baseFunctions": [
              65567
            ],
            "documentation": {
              "id": 65873,
              "nodeType": "StructuredDocumentation",
              "src": "3056:156:97",
              "text": " @dev Returns the address of the token to be distributed as rewards.\n @return The address of the token to be distributed as rewards."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_token",
            "nameLocation": "3226:6:97",
            "overrides": {
              "id": 65875,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3249:8:97"
            },
            "parameters": {
              "id": 65874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3232:2:97"
            },
            "returnParameters": {
              "id": 65879,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65878,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 65887,
                  "src": "3267:6:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$46102",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 65877,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 65876,
                      "name": "IERC20",
                      "nameLocations": [
                        "3267:6:97"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 46102,
                      "src": "3267:6:97"
                    },
                    "referencedDeclaration": 46102,
                    "src": "3267:6:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$46102",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3266:8:97"
            },
            "scope": 65916,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 65899,
            "nodeType": "FunctionDefinition",
            "src": "3427:99:97",
            "nodes": [],
            "body": {
              "id": 65898,
              "nodeType": "Block",
              "src": "3484:42:97",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "3230",
                        "id": 65895,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3516:2:97",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        },
                        "value": "20"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_20_by_1",
                          "typeString": "int_const 20"
                        }
                      ],
                      "id": 65894,
                      "name": "_getArgUint256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49,
                      "src": "3501:14:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) pure returns (uint256)"
                      }
                    },
                    "id": 65896,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3501:18:97",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 65893,
                  "id": 65897,
                  "nodeType": "Return",
                  "src": "3494:25:97"
                }
              ]
            },
            "baseFunctions": [
              65573
            ],
            "documentation": {
              "id": 65888,
              "nodeType": "StructuredDocumentation",
              "src": "3330:92:97",
              "text": " @dev Returns the pool ID of the staking pool.\n @return The pool ID."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_pid",
            "nameLocation": "3436:4:97",
            "overrides": {
              "id": 65890,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3457:8:97"
            },
            "parameters": {
              "id": 65889,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3440:2:97"
            },
            "returnParameters": {
              "id": 65893,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65892,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 65899,
                  "src": "3475:7:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65891,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3475:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3474:9:97"
            },
            "scope": 65916,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 65915,
            "nodeType": "FunctionDefinition",
            "src": "3659:136:97",
            "nodes": [],
            "body": {
              "id": 65914,
              "nodeType": "Block",
              "src": "3727:68:97",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 65910,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            65899
                          ],
                          "referencedDeclaration": 65899,
                          "src": "3781:4:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
                            "typeString": "function () pure returns (uint256)"
                          }
                        },
                        "id": 65911,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3781:6:97",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 65907,
                            "name": "_caller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 64921,
                            "src": "3756:7:97",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 65906,
                          "name": "IMasterChef",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 63558,
                          "src": "3744:11:97",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IMasterChef_$63558_$",
                            "typeString": "type(contract IMasterChef)"
                          }
                        },
                        "id": 65908,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3744:20:97",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IMasterChef_$63558",
                          "typeString": "contract IMasterChef"
                        }
                      },
                      "id": 65909,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3765:15:97",
                      "memberName": "getTotalDeposit",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 63474,
                      "src": "3744:36:97",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view external returns (uint256)"
                      }
                    },
                    "id": 65912,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3744:44:97",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 65905,
                  "id": 65913,
                  "nodeType": "Return",
                  "src": "3737:51:97"
                }
              ]
            },
            "baseFunctions": [
              65579
            ],
            "documentation": {
              "id": 65900,
              "nodeType": "StructuredDocumentation",
              "src": "3532:122:97",
              "text": " @dev Returns the total supply of the staking pool.\n @return The total supply of the staking pool."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getTotalSupply",
            "nameLocation": "3668:15:97",
            "overrides": {
              "id": 65902,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3700:8:97"
            },
            "parameters": {
              "id": 65901,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3683:2:97"
            },
            "returnParameters": {
              "id": 65905,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65904,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 65915,
                  "src": "3718:7:97",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65903,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3718:7:97",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3717:9:97"
            },
            "scope": 65916,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 65716,
              "name": "BaseRewarder",
              "nameLocations": [
                "488:12:97"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 65580,
              "src": "488:12:97"
            },
            "id": 65717,
            "nodeType": "InheritanceSpecifier",
            "src": "488:12:97"
          },
          {
            "baseName": {
              "id": 65718,
              "name": "IMasterChefRewarder",
              "nameLocations": [
                "502:19:97"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 63585,
              "src": "502:19:97"
            },
            "id": 65719,
            "nodeType": "InheritanceSpecifier",
            "src": "502:19:97"
          }
        ],
        "canonicalName": "MasterChefRewarder",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 65715,
          "nodeType": "StructuredDocumentation",
          "src": "329:127:97",
          "text": " @title MasterChef Rewarder Contract\n @dev Contract for distributing rewards to stakers in the MasterChef contract."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          65916,
          63585,
          65580,
          63229,
          121,
          43724,
          43919,
          44211,
          44173
        ],
        "name": "MasterChefRewarder",
        "nameLocation": "466:18:97",
        "scope": 65917,
        "usedErrors": [
          43755,
          43760,
          43936,
          43939,
          46335,
          46616,
          46621,
          46624,
          63091,
          63093,
          63095,
          63097,
          63099,
          63101,
          63107,
          63109,
          63113,
          63117,
          63566,
          63568,
          63570
        ],
        "usedEvents": [
          43619,
          43766,
          43944,
          63126,
          63134
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 97
}